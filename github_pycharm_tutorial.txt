FLASK WEB APP GITHUB README

We need to have a github in order to work independently but simultaneously on the same code base.

GitHub allows us to:

Pull- Take code from github and download it to our local machine

Push- Put code from our local machine onto the GitHub


You will often see Local and Remote, Local is our branch on our local machine, remote is the branch on github servers.


To use github we need to have

1) A Project Folder- This is where your code will be stored locally for this project. Name it something like bioinfo-group-project. 

2) A virtual environment- This is a stand-alone environment where you can use normal python/ unix functionality, but it's kept seperate from the rest of your machine/ work. Any packages you install on your local machine will not be accessable within this environment, unless they're globally inherited. Git should work for example, but pandas or numpy might not. Any packages you install within this virtual environment won't be accessable outside it.

Make this virtual environment within your project folder


Open the terminal, can do this in pycharm or on unix like normal

$ cd uni-work
(Or wherever you want your work to be stored)

$ mkdir bioinfo-group-project

$ pip3 list

Will see a whole bunch of packages, with different versions


$ cd uni-work/bioinfo-group-project
cd to work/project directory

$ python3 -m venv .venv
this makes a new virtual environment in a hidden folder 

$ source .venv/bin/activate
this activates the venv, you should see your command line change from nick@nick $ to (venv) nick@nick $

Activation of the venv is very important, you need to do this every time you work on this project.
Simply cd to the work directory, then enter $ source .venv/bin/activate, and you're good to go


Now the venv is active, you can install packages to your virtual environment and work within it.

$ pip3 list
Should be essentially empty, with only pip and setuptools

Upgrade pip if you can, using the command in the prompt, mine shows: 
'/home/nick-work/bioinfo-group-project/.venv/bin/python3 -m pip install --upgrade pip' command.

But you only need to do:

$ pip install --upgrade pip


In Pycharm, or your IDE of choice, you can now set up your project folder. For simplicity, lets keep this the same as our project folder name.

Pycharm file-> open-> bioinfo-group-project 


Now we should have a blank project, we need to set up the interpreter, in pycharm in the bottom-right of the screen it might say no interpreter. It might say python 3.7, or something else. 
We want to make sure it's the virtual env we just set up.

So in Pycharm either click the interpreter button in the bottom right and click interpreter settings, or find python interpreter in file -> settings -> Project: bioinfo-group-project

If it's set up automatically correctly it should only display pip and setuptools, in a python 3.7 environment. 

If it shows nothing, or something else, we need to set up the correct interpreter by clicking the cog wheel icon, then add, then virtualenv Environment, exsisting environment, then the elipsies next to the drop-down box, then find the venv we created in our bioinfo-group-project folder.

we need to select the /.venv/bin/python3 as the interpreter. Mine is in:
/home/nick-work/bioinfo-group-project/.venv/bin/python3

Click okay and we should see only two installed packages, pip and setuptools.


To recap, so far we've created a project folder to work in, called bioinfo-group-project. We've created a new virtualenvironment using python 3.7 (Hopefully, but can discuss) called .venv, we've checked to make sure it's a clean venv with pip list, and we've opened our project folder in pycharm so we can get coding, told pycharm to use our new .venv, and checked to make sure it's empty.

While working in pycharm, we can use the terminal in the IDE, or use our normal terminal, just make sure you're using the virtual environment while working to keep your code modular. 

$ source .venv/bin/activate

In pycharm when I open the terminal it already comes up with (.venv), this may be because it's already active on my local machine terminal, but not sure, might be because it's the terminal within the venv in pycharm.


Now we need to clone our github repo main branch into pycharm.

There are several ways of doing this: manually, downloading the files from github and saving them in our bioinfo-group-project folder. automatically via the terminal on our local machine, or in the terminal within pycharm. 

Using the terminal locally:

Open the terminal, cd to your project directory where you want to store the github files, activate the venv (not strictly required, but good practice) 

(.venv) (base) nick-work@nick-work:~/bioinfo-group-project$ 

The command to clone the repo is 

$ git clone "URL"

So we need the url of the repo, to access this, go to the github page https://github.com/NHardie/bioinfo-group-project

There should be a green code button, click that and copy the webaddress shown
https://github.com/NHardie/bioinfo-group-project.git

Now back in the terminal 

$ git clone https://github.com/NHardie/bioinfo-group-project.git

It will ask for a username and then password, this is the username and password for your github account, hit enter and it should automatically download the github repo files.

Now if we look in pycharm, or in the directory folder, we should see the .venv folder, as well as the cloned github repo. 

On my version of pycharm in the bottom-right hand corner there is an icon with a little branch and the word main. Clicking that shows you the various branches of the repo we can access.

The local branch main is the copy of the remote branch main. If you click that icon and select a different branch, say flask-test, then checkout, you'll notice you can now access flask-test files, instead of main locally. 

Clicking the button in the bottom right again will show us that now flask-test is stored locally as well, and going back to our terminal and using 

$ ls

Will now show us that the files in the bioinfo-group-project directory have changed, now only Flask_Blog can be seen.

Now if we repeat the same action, checkout local main, we'll see the files from branch main have been restored. 


We don't want to work on main directly, instead what we want to do is work on a branch off of main.

Again clicking the button in the bottom-right, lets now select the remote branch /origin/main

Lets now choose new branch from selected, and give it a new branch name, say yourname-test.

Now the files shouldn't have changed, because you've taken the same files as are in main, copied them, and named them name-test. 

Here is where you'll be working on your code.

Lets make a new python file, helloworld.py within the bioinfo-group-project directory, not the top-level one containing our .venv, but the one below.

On my machine I get a popup saying do you want to add the file to git. 
We do, but lets say cancel for now, and do it manually

Lets write our helloworld file, have it print hello world, make sure you save the file.

Now we want to add our file to our github branch yourname-test. 

In GitHub this is called pushing, again clicking the icon in the bottom-right, click the name of the local branch you're working on and select push. 

Now, either you'll see the changes you've made to the file structure, or you won't. 

If you don't, we need to commit those changes.

To commit via pycharm you can either, click the green tick in the top-right where it says git, this is the commit button. Or you can right-click on the helloworld.py file, which should be red, and select from the drop-down box git -> commit file.

Both of these will open a commit panel on the left of the screen. Open the Unversioned files tab, showing 1 file unversioned, select helloworld.py and enter a commit message. "Add file", click commit. (You can also commit and Push, but lets do it step by step) 

Pycharm may now ask you for a username and email, just use the same username and email you do for github, this isn't totally required, but makes things simpler.

Now we are ready to push, lets select the local branch we're working on from the bottom-right icon, and select push.

Now we should see Push commits box, with the direction of pushing on the left, nick-test -> origin: nick-test. i.e. the local branch we made, pushing onto the remote branch we made.
And on the right we should see the files we're going to commit. 

Selecting push should now Push these committed file changes onto our GitHub repo branch, lets check on the website.

We now see a flashed message nick-test had recent pushes 1 minute ago, with a green compare & pull request button. 

Lets click that and see the changes we made, the commited files, commit message and what we can now do.

Lets create a pull request, which allows us to have other people see our changes and agree to pull them from the local branch onto the remote branch.

Now we can merge the pull request, which merges the test branch into the main branch


Now our main branch has a new file, helloworld.py, we can now delete the branch we were working on. 

If we now check the main branch, we can see the helloworld.py file is there.

Although we don't need it, this is how we're going to operate the addition of code to GitHub for our important files. 


Back in Pycharm, lets update our main branch to see these file changes.

Click the icon in the bottom-right, select local branch main and click update, now the helloworld.py file should appear.

Let's go ahead and delete this file. 

Remember we deleted our branch yourname-test, so we need to checkout the main branch again and make a new branch, we can actually call this the same as before yourname-test, but make sure to select overwrite. 

Now we have created and checkedout a new branch from local main, which was updated, we can delete the helloworld.py file, by right clicking the file and selecting delete.

The file should disappear, and now as before we need to commit changes. 

The commit bar should now say 1 deleted, lets go ahead and commit that, with a message delete file.

Lets commit and push those changes, and now check in with the github repo website again.

Have a look at the branch where we commited those changes, yourname-test. It should say it's one commit ahead of main. Lets create a pull request as before, and we can merge and delete the old branch.

Back in pycharm, we can now update our main branch again, and we should see those changes take effect, helloworld.py should no longer be there.

Lets finish off by doing checkout main, and now we can delete our local copy of yourname-test

main checkout

yourname-test, delete.


Now if we update our local main, we should see our yourname-test branch disappear, although this can take a minute or two. 

Done!

IN PYCHARM-
We checkout remote origin/main, saving it locally. 
Then checkout local/main. 
Then branch from local/main. 
Then work on the files in that branch. 
Then commit file changes.
Then push changes. 

ON GITHUB-
We select the branch we're working on.
We check the commit went through.
We create a pull request.
We then merge the changes with main.
We delete the old branch.

IN PYCHARM-
Update local main.
Checkout local main.
Then we branch from local main, start process again. 

